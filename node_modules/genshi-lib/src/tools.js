var fs = require('fs');
var convert = require('xml-js');
var tools = module.exports;

module.exports = {
  getRawFile: function(file){
    return new Promise( resolve => {
      fs.readFile(file, function(err, content){
        if(err) throw new Error(`Can't load ${file}, may not exists // `.red + err);
        resolve(content);
      });
    });
  },
  loadXMLObject: async function(file){
    return new Promise( async (resolve) => {
        var x = await module.exports.getRawFile( file );
        var xml = convert.xml2json(x, {compact: true, spaces: 2});
        xml = JSON.parse(xml);
        var convertXML = function(e){
          var data = {};
          var appData = e;
          for(var i in appData){
            if(!i.includes(':')) continue;
            var index = i.substring( i.indexOf(':') + 1, i.length );
            if(i.includes('app:') || i.includes('page:')){
              for(var j in appData[i]){
                if(data[index] === undefined) data[index] = {}
                if(j.includes('prop:') || j.includes('meta:')) {
                  var jIndex = j.substring( j.indexOf(':') + 1, j.length );
                  var jObj = appData[i][j]['_attributes'];
                  if(Object.values(jObj).length <= 1) data[index][ jIndex ] = Object.values(jObj)[0];
                  else data[index][ jIndex ] = jObj;
                } else if (j.includes('item') && index != 'toolbar') {
                  if(!data[index]['items']) data[index]['items'] = appData[i][j];
                  for(var o in data[index]['items']){
                    if( Array.isArray( data[index]['items'] ) ){
                      data[index]['items'][o] = data[index]['items'][o]['_attributes'];
                      if( data[index]['items'][o].length <= 1 ) data[index]['items'][o] = data[index]['items'][o][0];
                    } else if( o == "_attributes" ) data[index]['items'] = [ data[index]['items'][o] ];
                  }
                }
              }
              //toolbar assigment;
              if(index === 'toolbar' &&  appData[i].item !== undefined ) {
                if( !Array.isArray(appData[i].item) ) appData[i].item = [ appData[i].item ];
                appData[i]['_attributes'] = { label:"_MAIN" }; appData[i] = [ appData[i] ];
                var getItems = function(o){
                  var val = {}; var eIndex = 0;
                  for(var x in o){
                    if( !o[x]._attributes ) continue;
                    var props = o[x]._attributes;
                    if(o[x].item !== undefined) {
                      if( !Array.isArray( o[x].item ) ) o[x].item = [ o[x].item ];
                      var properties =  getItems( o[x].item ); properties.props = o[x]._attributes;
                      val[ `${eIndex}-${props.label}` ] = properties;
                    } else {
                      val[ `${eIndex}-${props.label}` ] = props;
                    } eIndex++;
                  } return val;
                }; data[index] = getItems( appData[i] );
              }
            } else if( i.includes('meta:') ) {
              var zobj = appData[i]['_attributes'];
              if(Object.values(zobj).length <= 1) data[index] = Object.values(zobj)[0];
              else data[index] = zobj;
            } else if( i.includes('platform:') ) {
              data[index] = convertXML( appData[i].item );
            }
          } return data;
        }; var result = convertXML( xml['application'] || xml['page'] );
        //=============REPLACE PLATFORM VARIATIONS $<>
        var platform = process.platform;
        if(platform == 'darwin') { platform = 'mac'; process.platform = 'mac'; }
        if( result[platform] ) {
          try {
            var platformProps = result[platform];
            for(var x in platformProps){
              if( typeof platformProps[x] === 'object' ) {
                for(var i in platformProps[x]) { result[x][i] = platformProps[x][i]; }
              } else { result[x] = platformProps[x]; }
            }
          } catch(pex) { console.error(`Can't apply platform properties (${file} :: ${platform}) // ${pex}`); }
        } resolve(result);
      });
    },
    $: function(identifier){
      var elements = [];
      elements = identifier.split(' ');
      if(elements[ elements.length - 1 ] == "") elements = elements.slice(0, -1);
      if(elements.length > 1){
        var prnt = undefined;
        var e = undefined;
        for(var x=0; x < elements.length; x++){
          if(x == (elements.length - 1)) e = module.exports.getElement(elements[x], prnt);
          else prnt = module.exports.getElement(elements[x], prnt);
        } return e;
      } else { return module.exports.getElement(elements[0]); }
    },
    getElement: function(identifier, parent){
      var e = undefined; //parent must be a DOM Element;
      var name = identifier; var i = identifier;
      if(i.includes('.') || i.includes('#')){
          name = name.substring(1, name.length);
          i = i.substring(0, 1); }
      if( i == "#" ){
        if(parent === undefined) e = document.getElementById(name);
        else e = parent.getElementById(name);
      } else if( i == "." ){
        if(parent === undefined) e = document.getElementsByClassName(name);
        else e = parent.getElementsByClassName(name);
        if( e !== undefined ) {
          if( e.length <= 1 ) e = e[0];
        }
      } else {
        if(parent === undefined) e = document.getElementsByTagName(name);
        else e = parent.getElementsByTagName(name);
        if( e !== undefined ) {
          if( e.length <= 1 ) e = e[0];
        }
      }
      //@=====<
      if(e !== undefined) {
        //e.hide = function(animation, time, callback){

        //};
      } return e;
    },
    importCSS: async (file, parent) => {
      return new Promise( resolve => {
        if(!fs.existsSync(file)) throw new Error( `Can't import CSS File (${file}) // File not found!` );
        var head  = parent || document.getElementsByTagName('head')[0];
        var link  = document.createElement('link');
        link.rel  = 'stylesheet'; link.media = 'all';
        link.type = 'text/css'; link.href = file;
        head.appendChild(link); resolve(true);
      });
    },
    importJS: async (file, parent) => {
      return new Promise( resolve => {
        if(!fs.existsSync(file)) throw new Error( `Can't import JS File (${file}) // File not found!` );
        var head  = parent || document.getElementsByTagName('head')[0];
      var script = document.createElement('script');
      script.type = 'text/javascript'; script.src = file;
      script.onload = script.onreadystatechange = function() {
        var rs = this.readyState;
        if (rs) {
          if ((rs != 'complete') && (rs != 'loaded')) { return resolve(undefined); }
        }; resolve(script);
      }; head.appendChild(script);
    });
  },
  importHTML: async (file, parent, pageIndex, clear) => {
    return new Promise( async (resolve) => {
      if(!fs.existsSync(file)) throw new Error( `Can't import HTML File (${file}) // File not found!` );
      var body  = parent || document.getElementsByTagName('body')[0];
      var html = fs.readFileSync(file, 'utf-8');
      body.innerHTML += html;
      file = file.replace(/\\/g, "/");
      //import images
      var images = body.getElementsByTagName('img');
      if(images.length > 0){
        for(var o in images){
          if(images[o].src !== undefined && body.id != 'app-content' ) {
            if( !images[o].src.includes('http') && !images[o].src.includes('assets/images/') ){
              var src = images[o].src;
              if( src.includes('file://') ) src = src.substring( src.lastIndexOf('/') , src.length );
              if( src.substring( 0, 2 ) == './' ) src = src.substring( 1, src.length );
              var sfile = `./pages/${pageIndex}/${src}`; images[o].src = sfile; }
          }
        }
      }
      //import scripts
      var scripts = body.getElementsByTagName('script');
      if(scripts.length > 0){
        for(var x in scripts){
          if(scripts[x].src !== undefined) {
            var sfile = file;
            var src = scripts[x].src;
            if(src.includes('\\')){ src = src.substring( src.lastIndexOf('\\'), src.length ); }
            if(src.includes('/')){ src = src.substring( src.lastIndexOf('/'), src.length ); }
            sfile = sfile.substring( 0, sfile.lastIndexOf('/') );
            sfile += src; try{ scripts[x].remove(); } catch(o){ }
            await module.exports.importJS(sfile, parent);
          } else{
            try{ eval( scripts[x].innerHTML ); }
            catch(ex){ console.error(`Can't load a script tag inside ${file} :: ${ex}`); }
          }
        }
      }
      //import style
      var styles = body.getElementsByTagName('link');
      if( styles.length > 0 ) {
        for(var i in styles){
          var link = styles[i]; if(link.href === undefined) continue;
          try{
            var sfile = file;
            var src = link.href;
            if(src.includes('\\')){ src = src.substring( src.lastIndexOf('\\'), src.length ); }
            if(src.includes('/')){ src = src.substring( src.lastIndexOf('/'), src.length ); }
            sfile = sfile.substring( 0, sfile.lastIndexOf('/') );
            sfile += src; try{ link.remove(); } catch(o){ }
            await module.exports.importCSS(sfile, parent);
          } catch(ex){ console.warn(`Can't load page style :: ${ex}`); }
        }
      }
      //resolve promise
      resolve(true);
    });
  },
  hex2rgb: function(hex) {
    "use strict";
    if (hex.charAt(0) === '#') { hex = hex.substr(1); }
    if ((hex.length < 2) || (hex.length > 6)) { return false; }
    var values = hex.split(''),r,g,b;
    if (hex.length === 2) {
        r = parseInt(values[0].toString() + values[1].toString(), 16); g = r; b = r;
    } else if (hex.length === 3) {
        r = parseInt(values[0].toString() + values[0].toString(), 16);
        g = parseInt(values[1].toString() + values[1].toString(), 16);
        b = parseInt(values[2].toString() + values[2].toString(), 16);
    } else if (hex.length === 6) {
        r = parseInt(values[0].toString() + values[1].toString(), 16);
        g = parseInt(values[2].toString() + values[3].toString(), 16);
        b = parseInt(values[4].toString() + values[5].toString(), 16);
    } else { return false; }
    return { r:r, g:g, b:b };
  },
  createIcon: async function(file) {
    return new Promise( async (resolve) => {
      if(!file.includes('/') && !file.includes('\\')) file = `${app.path}/assets/icons/${file}`;
      if(!file.toLowerCase().includes('.svg')) {
        //create icon from basic image
        resolve(`<img class="icon" src=${file}/>`);
      } else {
        //create icon from svg
        var wrapper = document.createElement('div');
        var svgDiv = document.createElement('div');
        wrapper.appendChild(svgDiv);
        var rawSvg = await module.exports.getRawFile(file);
        svgDiv.classList.add('--svg-icon', 'icon');
        svgDiv.innerHTML = rawSvg; var svg = wrapper.innerHTML;
        wrapper.remove(); resolve(svg);
      }
    });
  },
  createIconSync : async function( file ){
    var i = await module.exports.createIcon( file );
    return i;
  }
};
