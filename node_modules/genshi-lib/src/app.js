var tools = require(`${__dirname}/tools.js`);
var ui = require(`${__dirname}/ui.js`);
var path = require('path');
var fs = require('fs');
var $e = tools.$;
var browser = require('electron').remote;

var app = module.exports = {
  xml: undefined,
  window: browser,
  data: {},
  init: async () => {
    //app initialization :: error == useless app
    app.path = remote.app.getAppPath();
    var x0001 = await tools.loadXMLObject(`${app.path}/app.xml`);
    app.xml = x0001; if( x0001.data !== undefined ) app.data = x0001.data;

    //load important css files
    var xcss = [`${app.path}/assets/global/style.css`, `${app.path}/assets/css/animate.css`,
      `${app.path}/assets/css/roboto.css`, `${app.path}/assets/css/material-icons.css`,
      `${app.path}/assets/css/UI.css`, `${__dirname}/style.css`];
    for(var x=0; x < xcss.length; x++) await tools.importCSS(xcss[x]);

    //create splash-screen
    var appWrapper = $e('#app-wrapper');
    var xsplash = undefined;
    if( x0001['splash-screen'] ) {
      xsplash = CreateSplashScreen( x0001['splash-screen'], appWrapper );
    }

    //load important js files
    var xjs = [`${app.path}/assets/global/global.js`, `${__dirname}/lib.js`];
    for(var j=0; j < xjs.length; j++) await tools.importJS(xjs[j]);

    //$=====================<>
    ApplyTheme(); //========<>
    browser = browser.getCurrentWindow();

    app.platform = platform = x0001['debug-platform'] || process.platform;
    if(platform == 'darwin') { platform = 'mac'; app.platform = 'mac'; }
    if(x0001['window-frame-platform'] !== undefined) platform = x0001['window-frame-platform'];
    if(x0001['window-frame'] === undefined) x0001['window-frame'] = 'default';
    else if(platform.includes('win')) platform = 'windows';

    if(x0001['window-rounded'] !== undefined){ if(x0001['window-rounded'] == 'false') appWrapper.classList.add('no-rounded'); }
    var frameStyle = x0001['window-frame'] || 'default';
    if(frameStyle === undefined){ frameStyle='default'; }
    var frameProps = {
      noMaximizable: browser.isMaximizable(),
      noMinimizable: browser.isMinimizable(),
      noClosable: browser.isClosable()
    }; for(var z in frameProps) if(frameProps[z] == false) appWrapper.classList.add(z);
    appWrapper.classList.add(platform, x0001.theme.style, `${frameStyle}-frame`);

    //init essential ui
    var appContent = document.createElement('div');
    appContent.id = "app-content"; appWrapper.appendChild(appContent);
    tools.importHTML(`${app.path}/assets/html/essentials.html`, appContent);
    appWrapper.append( $e('#app-frame') );
    $e('#app-frame .title').innerHTML = x0001.name;
    $e('title').innerHTML = x0001.name;

    //toolbar initialization
    if( x0001['toolbar'] !== undefined ) {
      var enableToolbar = ( x0001['toolbar'].enable !== undefined ) ? x0001['toolbar'].enable : 'true';
      if( enableToolbar == 'true' ) {
        appWrapper.setAttribute('toolbar', true); var toolsWrapper = document.createElement('div');
        toolsWrapper.classList.add('tools-wrapper'); var xitems = x0001.toolbar['0-_MAIN'];
        var navWrapper = document.createElement('nav'); toolsWrapper.appendChild(navWrapper);
        var xicon = async function(file){
          var icon = undefined;
          if( file.includes('.') ) icon = await tools.createIcon(file);
          else icon = `<i class="material-icons">${file}</i>`; return icon;
        };
        var setItems = async function(obj, wrapper, parent){
          var containerWidth = 48; var fontWidth = 11;
          for(var z in obj){
            var item = obj[z];
            if( item.props ){
              var iconLength = ( item.props.icon !== undefined ) ? 32 : 0;
              var textLength = ( item.props.label !== undefined ) ? ( item.props.label.length * fontWidth ) : 0;
              var totalLength = ( textLength + iconLength );
              containerWidth = ( totalLength > containerWidth ) ? totalLength : containerWidth;
              var list = document.createElement('button'); list.classList.add('dropdown');
              if( item.props.icon ) list.innerHTML += await xicon( item.props.icon );
              list.innerHTML += item.props.label;
              var listSubmenu = document.createElement('div'); listSubmenu.classList.add('dropdown-content');
              list.appendChild(listSubmenu);
              setItems(item, listSubmenu, item.props.label );
              wrapper.appendChild( list );
              if( parent == "_MAIN" ) {
                var ls = list;
                ls.onclick = function(e){
                  var frameElem = $e('#app-frame'); if(frameElem === undefined) return false;
                  if( !frameElem.getAttribute('showToolbar') ) { frameElem.setAttribute('showToolbar', true); }
                  else { frameElem.removeAttribute('showToolbar'); }
                };
              }
            } else if( item.label && item.label != parent ) {
              var iconLength = ( item.icon !== undefined ) ? 32 : 0;
              var keyLength = ( item.hotkey !== undefined ) ? ( (item.hotkey.length * fontWidth) ) : 0;
              var textLength = ( item.label !== undefined ) ? ( item.label.length * fontWidth ) : 0;
              var totalLength = ( textLength + iconLength + keyLength );
              containerWidth = ( totalLength > containerWidth ) ? totalLength : containerWidth;
              var listItem = document.createElement('button');
              if( item.icon ) listItem.innerHTML += await xicon( item.icon );
              listItem.innerHTML += `${ item.label }`;
              if( item.hotkey ) listItem.innerHTML += `<font>${item.hotkey}</font>`;
              wrapper.appendChild( listItem ); var action = item.action;
              if( item['line-break'] ) { if( item['line-break'] != 'false' ) listItem.classList.add('linebreak'); }
              listItem.onclick = function(e){ eval(`${action}(this);`); };
            }
          } if( parent != '_MAIN' ) wrapper.style.width = `${containerWidth}px`;
        }; setItems( xitems, navWrapper, '_MAIN' );
        $e('#app-frame').appendChild( toolsWrapper );
      }
    } //$===================<>

    if( !app.xml['menu'] ) app.xml['menu'] = { type:'none' }; app.xml['menu'].index = app.xml.index;
    $e('#app-menu').classList.add( app.xml['menu'].type || 'sidebar' );
    var menuWrapper = $e('#app-menu');
    if( app.xml['menu'].type ) app.xml['menu'].type = 'sidebar';
    if( app.xml['menu'] === undefined ) {
      app.xml['menu'] = {
        items: [{type:"section",title:"No Menu"}],
        type: 'none', index: 'home'
      }
    }
    if( app.xml['menu'].items !== undefined ){
      var itemsWrapper = menuWrapper.getElementsByClassName('items-wrapper')[0];
      for( var x in app.xml['menu'].items ) {
        var xitem = app.xml['menu'].items[x];
        var e = document.createElement('div');
        if( xitem.type == 'section'){
          e.classList.add('section');
          e.innerHTML = xitem.title;
        } else {
          e.classList.add('item');
          e.setAttribute('page-index', xitem.name);
          if(xitem.icon === undefined) { xitem.icon = 'help'; }
          if(xitem.icon.includes('.')) xitem.icon = await tools.createIcon( xitem.icon );
          else xitem.icon = `<i class="material-icons">${xitem.icon}</i>`;
          e.innerHTML += `${xitem.icon} <label>${xitem.label}</label>`;
          var itemIndex = xitem.name; e.setAttribute('ripple', true);
          xApplyRipple(e);
          const itemPageIndex = itemIndex;
          if( xitem.type == 'page' ){
            e.onmouseup = function(){
              if( !app.xml['menu'].attached || app.xml['menu'].attached == 'false' && app.xml['menu'].type.includes('sidebar') ){
                $e('#app-header .menu-button').onmouseup(); }
              app.loadPage( itemPageIndex );
            };
          } else if( xitem.type == 'action' ){
            var xaction = function(){ eval(`${xitem.action}(this);`); }
            e.onmouseup = function(){
              if( !app.xml['menu'].attached || app.xml['menu'].attached == 'false' && app.xml['menu'].type.includes('sidebar') ){
                $e('#app-header .menu-button').onmouseup(); }
              xaction();
            };
          }
        } itemsWrapper.appendChild(e);
      }
    } else { menuWrapper.setAttribute('class', 'none'); }//menuWrapper.remove();
    var somethingInside = function(elem){
      var t = elem.innerHTML.replace(/^\s+/,'');
      if(t == ''){ return false; } else { return true; } };
    var menuHeader = $e('#app-menu .header'); var menuFooter = $e('#app-menu .footer');
    if(somethingInside( menuHeader )) {
      menuHeader.style.display = 'block';
      menuHeader.style.height = app.xml['menu']['header-height'] || '64px';
    }
    if(somethingInside( menuFooter )) {
      menuFooter.style.display = 'block';
      menuFooter.style.height = app.xml['menu']['footer-height'] || '64px';
    }
    if(!menuFooter.style.height) menuFooter.style.height = '0px';
    if(!menuHeader.style.height) menuHeader.style.height = '0px';
    $e('#app-menu .items-wrapper').style.height = `calc( 100% - ${menuHeader.style.height} - ${menuFooter.style.height} - 12px )`;
    menuWrapper.setAttribute('attached', app.xml['menu'].attached || 'false');
    //menuWrapper.setAttribute('active', true); //only for debugg
    ApplyOSFrame(platform);//=====<>
    //=============================$

    //load index
    var pageWrapper = document.createElement('div');
    pageWrapper.id = "app-page"; appContent.appendChild(pageWrapper);
    app.mainPage = app.xml.menu.index;
    module.exports.loadPage( app.mainPage );

    //finish init with eventListener
    if(app.eventListeners['ready'] !== undefined){
      try{ app.eventListeners['ready'](); }
      catch(ex){ console.error(ex); }
    }
  },
  on: (listener, funct) => { app.eventListeners[listener] = funct },
  eventListeners: {},
  loadPage: async function(index){
    var closePage = true;
    if( page.eventListeners['close'] !== undefined ) closePage = page.eventListeners['close']();
    if(closePage == false) return;
    var oldIndex = app.currentPage || '';
    var wrapper = $e('#app-page');
    try{ var menuItems = $e('#app-menu .items-wrapper').getElementsByClassName('item');
      if(menuItems.length > 0) {
        for(var x=0; x < menuItems.length; x++) { try{
          if( menuItems[x].getAttribute('page-index') == index ) menuItems[x].classList.add('selected');
          else if( menuItems[x].getAttribute('page-index') == oldIndex )  menuItems[x].classList.remove('selected');
        } catch(ex){ console.warn(ex); } }
      }
    } catch(bex){ } app.currentPage = index;
    var xpage = page = module.exports.page;
    //start page loading = files $=<>
    page.eventListeners = {};
    ui.xloader(wrapper); try{
      var nFiles = ['index.html', 'config.xml'];
      for(var x=0; x < nFiles.length; x++){
        if( !fs.existsSync(`${app.path}/pages/${index}/${nFiles[x]}`) )
          throw new Error(`Can't load "${index}" page // ${nFiles[x]} not Found!`);
      } //Check necessary files <>
      var dir = `${app.path}/pages/${index}/`;
      if(wrapper === undefined) throw new Error(`Oops!, No #app-wrapper element found in main index.html!`);
      var pageData = await tools.loadXMLObject(`${dir}/config.xml`);
      for(var z in pageData) xpage[z] = pageData[z];
      //try{ await tools.importJS(`${dir}/page.js` , wrapper); } catch(cssEx){ console.warn(cssEx) }
      //try{ await tools.importCSS(`${dir}/style.css` , wrapper); } catch(jsEx){ console.warn(jsEx) }
      //config.xml touces $==<>

      var html = await tools.importHTML(`${dir}/index.html`, wrapper, index, true);

      if(pageData.header === undefined) pageData.header = { style:'no-header' };
      var headerTitle = $e('#app-header .title');
      headerTitle.innerHTML = pageData.title;
      var delItems = $e('#app-header').getElementsByClassName('item');
      if(delItems.length > 0) {
        var itemsList = [];
        for(var o=0; o < delItems.length; o++) itemsList.push(delItems[o]);
        for(var x=0; x < itemsList.length; x++) {
        var xelem = itemsList[x]; xelem.parentNode.removeChild(xelem);
      } } //$=================================DEL CURRENT HEADER ITEMS
      if( pageData.header.items !== undefined ){ //$=Set header items <>
        CreateHeaderItems($e('#app-header'), pageData.header.items, pageData.header);
      } var itemsWidth = (function(){
        var v = 0; var elems = $e('#app-header').getElementsByClassName('e');
        for(var x in elems) { v += 44 } return v;
      }()); headerTitle.style.width = `calc(100% - ${itemsWidth}px)`;
      if( pageData.bubble !== undefined ){//$=Create Bubble
        var pageWrapper = $e('#app-page');
        await CreateBubble(pageWrapper, pageData.bubble );
      }

      xWindowHandlers(); xRefreshElements();

      //finish Loading
      xpage.index = index;
      if(xpage.eventListeners['ready'] !== undefined) { xpage.eventListeners['ready'](xpage); }
    } catch(ex) {
      console.error(ex); //return error and show empty page.
      wrapper.innerHTML = `<div class="--page-error"><i class="material-icons">error_outline</i><br/>Internal Error</div>`;
      $e('#app-header .title').innerHTML = '';
    } try{ $e('#app-page .--g-loader-wrapper').remove(); } catch(lex){ }
  },
  page: {
    on: function(event, func){
      module.exports.page.eventListeners[event] = func;
    },
    eventListeners: {},
    setTitle: (title) => {
      if(title === undefined) return false;
      $e('#app-header .title').innerHTML = title;
    },
    setHeaderImage: (img) => {
      if( !img.toLowerCase().includes('http') ){
        if( !fs.existsSync( img ) ) {
          if( img.includes('./') ) img = img.substring( 2, img.length );
          img = `./pages/${page.index}/${img}`;
        }
      }
      $e('#app-header').style.backgroundImage = `url(${img})`;
    },
    getCheckbox : (name) => {
      if( !page.checkbox ) return undefined;
      return page.checkbox[name];
    },
    setCheckbox : (name, value) => {
      if( !name ) return false;
      value = (value !== undefined) ? value : true;
      var e = page.Objects.checkbox[ name ];
      e.setAttribute( 'checked', value );
    },
    enableCheckbox : (name, value) => {
      if( !name ) return false;
      value = (value !== undefined) ? value : false;
      if( value == false ) value = true;
      else value = false;
      var e = page.Objects.checkbox[ name ];
      e.setAttribute( 'disabled', value );
    },
    getToggle : (name) => {
      if( !page.toggle ) return undefined;
      return page.toggle[name];
    },
    setToggle : (name, value) => {
      if( !name ) return false;
      value = (value !== undefined) ? value : true;
      var e = page.Objects.toggle[ name ];
      e.setAttribute( 'activated', value );
    },
    enableToggle : (name, value) => {
      if( !name ) return false;
      value = (value !== undefined) ? value : false;
      if( value == false ) value = true;
      else value = false;
      var e = page.Objects.toggle[ name ];
      e.setAttribute( 'disabled', value );
    }
  },
  applyTheme: ApplyTheme,
  changeThemeStyle: (style) => {
    if(style === undefined) return console.error(`No theme style specified!`);
    if(style.includes('d')) style = 'dark';
    if(style.includes('l')) style = 'light';
    app.xml.theme['style'] = style; app.applyTheme();
  }
}; page = app.page;
module.exports.tools = tools;

var CreateBubble = async function(wrapper, props ) {
  return new Promise( async (resolve) => {
    if(wrapper === undefined || props === undefined) return false;
    if(props.disable !== undefined){ if(props.disable === 'true') return false; }
    var bubble = document.createElement('button'); bubble.classList.add('bubble');
    if( props.icon === undefined ) props.icon = 'help';
    if( props.icon.includes('.') ) { var xicon = await tools.createIcon( props.icon ); bubble.innerHTML += xicon; }
    else { bubble.innerHTML += `<i class="material-icons">${props.icon}</i>`; }
    if( props.items ) {
      var itemsWrapper = document.createElement('div'); itemsWrapper.classList.add('items-wrapper');
      bubble.appendChild( itemsWrapper );
      for(var x in props.items){
        var item = props.items[x];
        if( item == undefined ) continue;
        var e = document.createElement('div'); e.classList.add('item');
        if(item.icon === undefined) item.icon = 'help';
        if(item.icon.includes('.')){ var icn = await tools.createIcon( item.icon ); e.innerHTML += icn; }
        else { e.innerHTML += `<i class="material-icons">${item.icon}</i>`; }
        var label = item.label || '?'; var lbl = document.createElement('label');
        lbl.innerHTML = label; e.appendChild( lbl );
        xwidth = (label.length * 8) + 64;
        if( isNaN(xwidth) || xwidth === undefined ) { xwidth = '100%'; } else { xwidth = `${xwidth}px`; }
        e.style.width = `${xwidth}`;
        e.onclick = function(el){ eval(`${item.action}(this);`); }
        //finally append element in items wrapper
        itemsWrapper.appendChild( e );
      }
    } else if ( props.action !== undefined ) {
      bubble.onclick = function(e){ eval(`${props.action}(this);`); }
      bubble.setAttribute('no-items', true);
    } else { return false; }
    wrapper.appendChild(bubble);
    resolve(true);
  });
};

var CreateHeaderItems = async function(wrapper, items, moreData) {
  var hitems = items;
  for(var x in hitems){
    if(hitems[x].icon === undefined) hitems[x].icon = 'help_outline';
    if(hitems[x].action === undefined) { console.error(`No action for header item: ${hitems[x]}`); continue }
    var xitem = document.createElement('div'); xitem.classList.add('e', 'item');
    var firstItem = wrapper.getElementsByClassName('first-item')[0];
    if( firstItem === undefined ) xitem.classList.add('first-item');
    xitem.setAttribute('ripple', true);
    if(hitems[x].icon.includes('.')) hitems[x].icon = await tools.createIcon( hitems[x].icon );
    else hitems[x].icon = `<i class="material-icons">${hitems[x].icon}</i>`;
    xitem.innerHTML = hitems[x].icon; wrapper.appendChild(xitem);
    xitem.onclick = function(){
      try{ eval(`window['${hitems[x].action}'](this);`); }
      catch(ex){ console.error(`Can't call header item function, Maybe '${hitems[x].action}' is not Defined :: ${ex}`) }
    }
  }
  if(moreData !== undefined) {
    var appContentWrapper = wrapper.parentElement || $e('#app-content');
    if(moreData['style'] == 'none') { moreData['style'] = 'no-header'; moreData.expand = undefined; }
    appContentWrapper.setAttribute('class', moreData['style'] || 'default');
    if(moreData.expand == 'true'){
      wrapper.setAttribute('expand', true);
    } else { wrapper.removeAttribute('expand'); }
  }
};

var ApplyTheme = function(){
  var palette = app.xml.theme;
  var mainRgb = tools.hex2rgb(palette['main-color']);
  var c = (function(){
    var color = undefined;
    for(var x in mainRgb){
      if(!color) color = { val: mainRgb[x], i: x };
      else if(mainRgb[x] > color.val) color = { val: mainRgb[x], i: x };
    } return color;
  }());
  var darkTone = function(rgb, subv){
    if(subv === undefined) subv = 32;
    var bcolor = { r:rgb.r, g:rgb.g, b:rgb.b };
    var sub = ( c.val - subv ); if(sub < 0) sub = 0;
    var orr = { r: ['r','b','g'], g: ['g','r','b'], b: ['b','g','r'] };
    for(var z in orr[ c.i ]){
      var cindex = orr[ c.i ][z];
      var zsub = (Math.floor( sub * z )); if(zsub <= 0) zsub = sub;
      bcolor[ cindex ] = rgb[ cindex ] - zsub;
      if( bcolor[ cindex ] < 0 ) bcolor[ cindex ] = ( subv - 8 ) - ( 1 * z );
    } return bcolor;
  };
  if(!palette.style) palette.style = 'light';
  if(!palette['background-color']){
    if(palette.style == "light") {
      palette['background-color'] = 'rgb(248, 248, 248)';
    } else {
      var bcolor = darkTone(mainRgb);
      palette['background-color'] = `rgb(${bcolor.r},${bcolor.g},${bcolor.b})`;
    }
  }
  if( palette.style == "light" ) { palette['text-color'] = 'rgb(16,16,16)'; }
  else { palette['text-color'] = 'white'; }
  var increaseTones = function(rgb, amount){
    var color = rgb;
    for(var x in color){
      if( isNaN(color[x]) ) continue;
      color[x] += amount || 48;
      if(color[x] > 255) color[x] = 255;
    } return color;
  };
  if(!palette['menu-color']){
    var mcolor = darkTone(mainRgb);
    if(palette.style == "dark") {  mcolor = darkTone(mainRgb, 18); mcolor = increaseTones(mcolor, 28); }
    palette['menu-color'] = `rgb(${mcolor.r},${mcolor.g},${mcolor.b})`;
  }
  if(!palette['secondary-color']) palette['secondary-color'] = palette['main-color'];
  var mainHover = increaseTones(mainRgb);
  if(!palette['hover-color']) palette['hover-color'] = `rgb(${mainHover.r},${mainHover.g},${mainHover.b})`;
  var secondaryHover = increaseTones( tools.hex2rgb(palette['secondary-color']) );
  if(!palette['secondary-hover-color']) palette['secondary-hover-color'] = `rgb(${secondaryHover.r},${secondaryHover.g},${secondaryHover.b})`;
  var html = document.getElementsByTagName('html')[0];
  for(var x in palette) html.style.cssText += `--${x}:${palette[x]}; `;
};

var ApplyOSFrame = (platform) => {
  if(platform == 'mac' || platform == 'linux'){
    $e('#app-frame').appendChild( $e('#app-frame .max') );
  }
  //========================================$<>
  if(platform == 'mac'){
    $e('#app-frame .max i').innerHTML = 'unfold_more';
  } else if(platform == 'linux') {

  }
};

var CreateSplashScreen = (props, wrapper) => {
  if( Array.isArray( props.background ) ) props.background = props.background[0];
  var e = document.createElement('div'); e.classList.add('app-splash');
  if( props.logo ) {
    if(typeof props.logo === 'object') props.logo = props.logo['file'];
    var ximg = document.createElement('div'); ximg.classList.add('logo');
    ximg.innerHTML = `<img src="${ props.logo }"/>`; e.appendChild( ximg );
  }

  if( props.background === undefined ) props.background = { type : 'solid' };
  if( props['background'].type == 'solid' && props['background'].color !== undefined){
    var color = props['background'].color; if( !color.includes('#') ) color = `#${color}`;
    e.style.backgroundColor = color;
  } else if( props.background.type == 'gradient' ){
    if( !props.background.angle ) props.background.angle = '0deg';
    var angle = props.background.angle; if( !angle.includes('deg') ) angle += 'deg';
    var from = ( props.background.from ) ? props.background.from : 'var(--main-color)';
    if( !from.substring(0, 1).includes('#') ) from = `#${from}`;
    var to = ( props.background.to ) ? props.background.to : 'var(--main-color)';
    if( !to.substring(0, 1).includes('#') ) to = `#${to}`;
    e.style.background = `linear-gradient(${angle}, ${to}, ${from})`;
  } else if( props.background.type == 'image' ) {
    e.style.backgroundImage = `url(${props.background.file})`;
  }

  if( app.xml ) {
    if( app.xml['version'] ) {
      var version = 'v' + app.xml['version'];
      var v = document.createElement('div'); v.classList.add('version');
      v.innerHTML = version; e.appendChild(v);
    }
  }

  if ( !props['out-animation'] ) props['out-animation'] = 'fadeOutDown';
  if ( !props.duration ) props.duration = 2400; else props.duration = parseInt( props.duration );
  e.style.animation = 'none'; var delay = (props.duration / 1000);
  var anim = `${props['out-animation']} 0.12s ${delay}s ease-in forwards`;
  e.style.animation = anim;
  setTimeout( () => {
    e.remove();
  }, props.duration + 200);

  wrapper.appendChild( e ); return e;
};

//let process know genshi's version.
process.versions.genshi = require(`${__dirname}/../package.json`).version;
