//Library for UI ELements ===$e();
const { shell } = require(`electron`);
let mainWindow = remote.getCurrentWindow();
let page = app.page; app.openLink = (link) => { shell.openExternal(link) };
let alert = ( str ) => { new DialogBox({ message:str }); };

var appWrapper = $e('#app-wrapper');
var $append = function( DOM ){ if(!DOM) return false; appWrapper.appendChild( DOM ); };

//WINDOW EVENT LISTENERS
var fullscreenFrameEnter = function(event){ $e('#app-wrapper').classList.remove('system-frame'); };
var fullscreenFrameLeave = function(event){
  var e = event.toElement || event.relatedTarget; if(e == null) return;
  if (e.parentNode == this || e == this || e.parentNode == $e('#app-frame')) return;
  $e('#app-wrapper').classList.add('system-frame');
};
mainWindow.on('enter-full-screen', function(e) {
  $e('#app-wrapper').classList.add('system-frame');
  if( app.xml['window-frame'] != 'system' ) {
    var header = $e('#app-header');
    header.style.cssText = `-webkit-app-region: no-drag;`;
    header.addEventListener('mouseover', fullscreenFrameEnter);
    header.addEventListener('mouseout', fullscreenFrameLeave);
  } $e('#app-frame .max i').innerHTML = 'unfold_less';
});
mainWindow.on('leave-full-screen', function(e) {
  if(app.xml['window-frame'] !== undefined){
    if( app.xml['window-frame'] == 'default' ) { $e('#app-wrapper').classList.remove('system-frame'); } }
  var header = $e('#app-header');
  header.removeEventListener('mouseover', fullscreenFrameEnter);
  header.removeEventListener('mouseout', fullscreenFrameLeave);
  if(app.platform == 'darwin' || app.platform.includes('mac') ) $e('#app-frame .max i').innerHTML = 'unfold_more';
});
var onMaximized = (e) => {
  try{
    mainWindow = remote.BrowserWindow.getFocusedWindow();
    if( app.xml['window-frame-platform'] == 'mac' ) {
      $e('#app-frame .max i').innerHTML = 'unfold_less';
    } else $e('#app-frame .max i').innerHTML = 'filter_none';
  $e('#app-wrapper').classList.add('no-rounded'); } catch(ex){ }
};
var onUnmaximize = (e) => {
  try{
    if( app.xml['window-frame-platform'] == 'mac' ) {
      $e('#app-frame .max i').innerHTML = 'unfold_more';
    } else $e('#app-frame .max i').innerHTML = 'check_box_outline_blank';
    var isRounded = app.xml['window-rounded'] || 'true';
  if( isRounded == 'true' ){ $e('#app-wrapper').classList.remove('no-rounded'); } } catch(ex){ }
}; let mainWindowMaximized = false;
mainWindow.on('maximize', function(e){ onMaximized(e); });
mainWindow.on('unmaximize', function(e){ onUnmaximize(e); });
//$====================<>


var onScrollPage = (e, headerElem) => {
  var contextMenus = document.getElementsByClassName('context-menu');
  for(var x in contextMenus) {
    if( typeof contextMenus[x] !== 'object' ) continue; var elem = contextMenus[x];
    var alreadyOpened = ( elem.getAttribute('alreadyOpened') == 'true' ) ? true : false;
    if( alreadyOpened == false ) { elem.setAttribute('alreadyOpened', true); continue; }
    elem.contextClass.select( null );
    if( elem.parent ) elem.parent.contextObj = undefined;
  }
  if( headerElem.getAttribute('expand') !== undefined ){
    var scrollPos = e.scrollTop;
    var bubble = e.getElementsByClassName('bubble')[0];
    if(bubble.getAttribute('expand') == 'true') { try{ bubble.onmouseup(); } catch(ex){ } }
    var expanded = headerElem.getAttribute('expand');
    if(scrollPos > 56 && expanded == 'true' ){
      headerElem.setAttribute('expand', false);
    } else if( scrollPos <= 56 && expanded == 'false' ) {
      headerElem.setAttribute('expand', true);
    }
  }
};

//=====================<>
var xWindowHandlers = function(){
  $e('#app-frame .max').onclick = (e) => {
    mainWindow = remote.BrowserWindow.getFocusedWindow();
    if( app.platform == 'darwin' || app.platform.includes('mac') ){
      mainWindow.isFullScreen() ? mainWindow.setFullScreen(false) : mainWindow.setFullScreen(true);
    } else {
      if(mainWindow.isMaximized() || mainWindowMaximized){
        mainWindowMaximized = false;
        mainWindow.unmaximize();
        if(process.platform.includes('win')) onUnmaximize();
      } else { mainWindowMaximized = true;
        mainWindow.maximize();
        if(process.platform.includes('win')) onMaximized();
      }
    }
  };
  $e('#app-frame .min').onclick = (e) => { mainWindow.minimize(); };
  $e('#app-frame .close').onclick = (e) => {
    if(app.eventListeners['close'] !== undefined) {
      try{ app.eventListeners['close'](); }
      catch(ex){ console.error(`Can't execute app.on('close'); // ${ex}`); }
    } mainWindow.close();
  };

  var menuElem = $e('#app-menu');
  $e('#app-header .menu-button').onmouseup = (e) => {
    var icon = $e('#app-header .menu-button i');
    var isActive = menuElem.getAttribute('active');
    if(isActive) {
      setTimeout( () => { icon.innerHTML = 'menu' }, 160 );
      menuElem.removeAttribute('active');
    } else {
      setTimeout( () => { icon.innerHTML = 'close' }, 160 );
      menuElem.setAttribute('active', true);
    }
  };

  $e('#app-content').onscroll = function(e){ onScrollPage(this, $e('#app-header')) };

  var bubbles = $e('.bubble');
  if( !HTMLCollection.prototype.isPrototypeOf(bubbles) ) bubbles = [bubbles];
  for(var x=0; x < bubbles.length; x++){
    if(bubbles[x] === undefined) continue;
    bubbles[x].onmouseup = function(e){
      var expanded = this.getAttribute('expand') || 'false';
      if(expanded == 'false') {
        this.setAttribute('expand', true);
        if( this.getAttribute('no-items') ) return;
        try { var i = this.getElementsByClassName('material-icons')[0];
          if(i.parentElement == this) {
            this.originalIcon = i.innerHTML; var ix = i;
            setTimeout( ()=>{ ix.innerHTML = 'close'; }, 90);
          }
        } catch(ex){}
        try { var i = this.getElementsByClassName('icon')[0];
          if(i.parentElement == this) {
            this.originalIcon = i.innerHTML;
            i.innerHTML = '<i class="material-icons">close</i>';
          }
        } catch(ex){}
      } else {
        this.setAttribute('expand', false);
        if( this.getAttribute('no-items') ) return;
        try { var i = this.getElementsByClassName('material-icons')[0];
          if(i.parentElement == this) { var ix = i;
            setTimeout( ()=>{ ix.innerHTML = this.originalIcon; }, 90);
          }
        } catch(ex){}
        try { var i = this.getElementsByClassName('icon')[0];
          if(i.parentElement == this) {i.innerHTML = this.originalIcon; }
        } catch(ex){}
      }
    };
  }

  var frameElem = $e('#app-frame');
  document.onclick = function(e){

    if( !e.srcElement.parentElement.classList.contains('dropdown') ) {
      if( frameElem.getAttribute('showToolbar') ) frameElem.removeAttribute('showToolbar');
    }

    if( e.srcElement.parentElement.id != 'app-menu' && !e.srcElement.parentElement.classList.contains('items-wrapper')
        && !e.srcElement.parentElement.classList.contains('e') && !e.srcElement.parentElement.classList.contains('header')
        && !e.srcElement.parentElement.classList.contains('footer') ) {
      if( menuElem.getAttribute('active') ) $e('#app-header .menu-button').onmouseup();
    }

    var bubbles = document.getElementsByClassName('bubble');
    for(var x in bubbles) {
      if( typeof bubbles[x] !== 'object' ) continue;
      if( bubbles[x].getAttribute('expand') === 'true' && !e.srcElement.classList.contains('item')
          && !e.srcElement.parentElement.classList.contains('bubble') ){
        bubbles[x].onmouseup();
      }
    }

    var contextMenus = document.getElementsByClassName('context-menu');
    for(var x in contextMenus) {
      if( typeof contextMenus[x] !== 'object' ) continue; var elem = contextMenus[x];
      var alreadyOpened = ( elem.getAttribute('alreadyOpened') == 'true' ) ? true : false;
      if( alreadyOpened == false ) { elem.setAttribute('alreadyOpened', true); continue; }
      if( !e.srcElement.classList.contains('context-menu')
          && !e.srcElement.parentElement.classList.contains('contextMenu-button')){
          elem.contextClass.select( null );
          if( elem.parent ) elem.parent.contextObj = undefined;
      }
    }

  };

};
//$====================<>


class ContextMenu {
  constructor( items, title ) {
    if( items === undefined ) return null;
    if( typeof items === 'object' ) items = Object.values( items );
    if( !Array.isArray( items ) ) return console.error( `Can't create new ContextMenu, items must be an objects Array.` );
    var e = document.createElement('div'); e.classList.add('context-menu'); e.contextClass = this; this.e = e;
    var windowEvent = window.event; this.e.parent = windowEvent.srcElement;
    var actualContext = this.e.parent.contextObj;
    if( actualContext !== undefined ) { this.e.parent.contextObj = undefined; return null; }
    else { this.e.parent.contextObj = this; }
    var classObj = this;
    var mwidth = 32; var fontWidth = 11; var mheight = 32;
    for(var x in items) {
      var i = items[x];
      if( !i.label ) continue;
      var iconLength = ( i.icon !== undefined ) ? 32 : 0;
      var contentLength = ( (i.label.length * fontWidth ) + 32) + iconLength;
      if( contentLength > mwidth && contentLength < 240 ) mwidth = contentLength;
      var item = document.createElement('button'); item.classList.add('contextMenu-button');
      if( i.icon ) {
        if( !i.icon.includes('.') ) { var xicon = `<i class="material-icons icon">${i.icon}</i>`
        item.innerHTML += xicon; }
      } item.innerHTML += `<label>${i.label}</label>`;
      if( i.linebreak == true ){ item.classList.add('linebreak'); }
      const itemVal = i.value;
      const itemEvent = i.action;
      item.onclick = (e) => {
        e.preventDefault();
        if( itemEvent !== undefined ){
          if( typeof itemEvent === 'string' ) { eval(`${itemEvent}(this);`); }
          else { itemEvent( this ); }
        } classObj.select( itemVal );
      }; e.appendChild( item ); mheight += 72;
      xApplyRipple( item );
    } e.style.width = `${mwidth}px`;

    var wWidth = window.innerWidth; var wHeight = window.innerHeight;
    var cursorX = windowEvent.pageX; var cursorY = windowEvent.pageY;
    if( cursorX + mwidth < wWidth) { var posX = cursorX + 16; e.style.left = `${posX}px`; e.classList.add('right'); }
    else { var posX = cursorX - (mwidth + 16); e.style.left = `${posX}px`; e.classList.add('left'); }
    if( cursorY + mheight < wHeight ) { var posY = cursorY + 20; e.style.top = `${posY}px`; e.classList.add('bottom'); }
    else { var posY = cursorY - (mheight - 20); e.style.top = `${posY}px`; e.classList.add('top'); }

    $append(e);
    var val = this.value = undefined;
    return new Promise( (resolve, reject) => {
      setInterval( () => {
        if( classObj.value !== undefined ) { resolve( classObj.value );
          classObj.e.style.animation = 'none';
          classObj.e.style.animation = 'zoomOut 0.10s ease-in forwards';
          setTimeout( () => { classObj.e.remove(); }, 120);
        }
      }, 80);
    });
  }
  select(item){
    if( item === undefined ) return;
    if(item == null) this.value = null;
    else this.value = item;
  }
}

class DialogBox {
  constructor( props ) {
    if( typeof props !== 'object' ) return console.error(`DialogBox argument must be an Object`);
    props.buttons = ( props.buttons !== undefined ) ? props.buttons : [ { label:"OK", value:null } ];
    return new Promise( resolve => {
      var initDialog = ( props ) => {
        var classObj = this; var wrp = document.createElement('div'); wrp.classList.add('dialog-box-wrapper');
        var dialog = this.e = document.createElement('div'); dialog.classList.add('dialog-box'); wrp.appendChild( dialog );
        if( props.title ) dialog.innerHTML += `<div class="title">${ props.icon }${ props.title }</div>`;
        else if( !props.title && props.icon ) dialog.innerHTML += `<div class="title only-icon">${ props.icon }</div>`;
        if( props.message ) dialog.innerHTML += `<div class="message">${ props.message }</div>`;
        if( props.html ) dialog.innerHTML += `<div class="html">${ props.html }</div>`;
        if( props.buttons ) { if( !Array.isArray(props.buttons) ) props.buttons = [props.buttons]; }

        if( props.inputs ) { if( !Array.isArray(props.inputs) ) props.inputs = [props.inputs];
          var inputsWrapper = document.createElement('div'); inputsWrapper.classList.add('inputs-wrapper');
          dialog.appendChild( inputsWrapper );
          for( var x in props.inputs ) {
            var xprops = props.inputs[x];
            let owner = xprops.button || 0;
            owner = props.buttons[owner];
            if( typeof owner.value !== 'object' ) owner.value = {};
            let index = xprops.name || `input-${x}`;
            if( xprops.type === undefined ) { console.warn(`Can't create dialog-box's input, no type specified`); continue; }
            if( xprops.type == 'text' || xprops.type == 'password' ) {
              var field = document.createElement('input'); inputsWrapper.appendChild(field);
              if( xprops.type == 'password' ) { field.type = 'password' } else { field.type = 'text'; }
              if( xprops.label ) field.setAttribute('placeholder', xprops.label );
              owner.value[index] = '';
              field.onkeyup = function(val){ owner.value[index] = field.value; };
            } else if ( xprops.type == 'toggle' ){
              var toggle = document.createElement('toggle'); inputsWrapper.appendChild(toggle);
              if( xprops.label ) toggle.innerHTML += `<label>${xprops.label}</label>`;
              owner.value[index] = 'false';
              toggle.onchange = function(val){ owner.value[index] = val; };
            } else if ( xprops.type == 'checkbox' ) {
              var checkbox = document.createElement('checkbox'); inputsWrapper.appendChild(checkbox);
              if( xprops.label ) checkbox.innerHTML += `<label>${xprops.label}</label>`;
              owner.value[index] = 'false';
              checkbox.onchange = function(val){ owner.value[index] = val; };
            }
          }
        } // start buttons creation
        if( props.buttons ) {
          var buttonsWrapper = document.createElement('div'); buttonsWrapper.classList.add('buttons-wrapper');
          dialog.appendChild( buttonsWrapper );
          for( var x in props.buttons ) {
            var xbutton = document.createElement('button'); xbutton.classList.add('text');
            var xprops = props.buttons[x]; xbutton.innerHTML = xprops.label;
            buttonsWrapper.appendChild( xbutton ); xApplyRipple( xbutton );
            const xval = (xprops.value !== undefined) ? xprops.value : null;
            const action = xprops.action;
            const buttonAction = function(){
              classObj.response( xval );
              if(action !== undefined) action();
            }; xbutton.onclick = (e) => buttonAction();
          }
        } $append( wrp ); if( props.inputs ) xRefreshElements();
        setInterval( () => {
          if( classObj.value !== undefined ) { var result = classObj.val || classObj.value;
            resolve( result ); classObj.e.style.animation = 'none';
            classObj.e.style.animation = 'zoomOut 0.12s ease-in forwards';
            setTimeout( () => { classObj.e.parentElement.remove(); }, 140);
          }
        }, 120);
      };
      if( props.icon ) { //create icon
        if( props.icon.includes('.') ) {
          app.tools.createIcon( props.icon ).then( result => {
            props.icon = result; initDialog( props );
          } ).catch( ex => { console.error(ex); initDialog( props ); });
        } else { props.icon = `<i class="material-icons">${props.icon}</i>`; initDialog( props ); }
      } else { props.icon = ''; initDialog( props ); }
    });
  }
  response( val ){
    if( val === undefined ) return;
    this.value = val;
  }
}

//$====================<>
var xRefreshElements = function(){
  page.Objects = {};

  var he = $e('#app-header .e');
  if(typeof he === 'string') he = [he];
  for(var x in he) xApplyRipple(he[x]);

  var buttons = $e('button');
  if(buttons !== undefined) {
    if( !HTMLCollection.prototype.isPrototypeOf(buttons) ) buttons = [buttons];
    for(var i in buttons) xApplyRipple(buttons[i]);
  }

  var links = $e('a');
  if( links !== undefined ){
    if( !HTMLCollection.prototype.isPrototypeOf(links) ) links = [links];
    for(var z in links) {
      links[z].onclick = function(e){
        e.preventDefault();
        shell.openExternal(this.href);
      }
    }
  }

  var checkboxes = $e('checkbox');
  page.checkbox = {}; page.Objects.checkbox = {};
  if(checkboxes !== undefined){
    if( !HTMLCollection.prototype.isPrototypeOf(checkboxes) ) checkboxes = [checkboxes];
    for(var i in checkboxes) {
      var checkbox = checkboxes[i];
      if( typeof checkbox !== 'object' ) continue;
      var checkboxName = checkbox.getAttribute('name');
      page.Objects.checkbox[ checkboxName ] = checkbox;
      if ( typeof checkbox !== 'object' ) continue;
      if ( checkboxName ) page.checkbox[checkboxName] = (function(){
        var isActive = checkbox.getAttribute('checked');
        if(isActive == '') { isActive = 'true'; } else if( !isActive ){ isActive = 'false'; }
        return isActive;
      }());
      checkboxes[i].onclick = function(e){
        var checkbox = this;
        var isDisabled = checkbox.getAttribute('disabled');
        if( isDisabled !== null ){ if(isDisabled == '') isDisabled = 'true'; }
        if( isDisabled ){ if( isDisabled != 'false' ) return false; }
        var checkboxName = checkbox.getAttribute('name');
        var isActive = checkbox.getAttribute('checked');
        if(isActive == '') { isActive = 'true'; } else if( !isActive ){ isActive = 'false'; }
        if( isActive == 'true' ){ checkbox.setAttribute('checked', 'false'); page.checkbox[checkboxName] = 'false'; }
        else { checkbox.setAttribute('checked', 'true'); page.checkbox[checkboxName] = 'true'; }
        var newVal = checkbox.getAttribute('checked');
        var onchange = checkbox.getAttribute('onchange'); //onchange
        if( onchange ) {
          if ( onchange.includes('function(') || onchange.includes('function (') ) {
            eval(`(${onchange})(${newVal});`); } else {
            if( onchange.includes('(') ) { onchange = onchange.substring( 0, onchange.indexOf('(') ); }
            try { eval(`${onchange}(${page.checkbox[checkboxName]})`); } catch(ex){ console.error(`Can't call onchange function :: ${ex}`); }
          }
        } else if( checkbox.onchange ) { checkbox.onchange( newVal ); }
      }; checkboxes[i].setAttribute('ripple', true); xApplyRipple( checkboxes[i] );
    }
  }

  var toggles = $e('toggle');
  page.toggle = {}; page.Objects.toggle = {};
  if(toggles !== undefined){
    if( !HTMLCollection.prototype.isPrototypeOf(toggles) ) toggles = [toggles];
    for(var i in toggles) {
      var toggle = toggles[i];
      if( typeof toggle !== 'object' ) continue;
      var toggleName = toggle.getAttribute('name');
      page.Objects.toggle[ toggleName ] = toggle;
      if ( typeof toggle !== 'object' ) continue;
      if ( toggleName ) page.toggle[toggleName] = (function(){
        var isActive = toggle.getAttribute('activated');
        if(isActive == '') { isActive = 'true'; } else if( !isActive ){ isActive = 'false'; }
        return isActive;
      }());
      toggles[i].onclick = function(e){
        var toggle = this;
        var isDisabled = toggle.getAttribute('disabled');
        if( isDisabled !== null ){ if(isDisabled == '') isDisabled = 'true'; }
        if( isDisabled ){ if( isDisabled != 'false' ) return false; }
        var toggleName = toggle.getAttribute('name');
        var isActive = toggle.getAttribute('activated');
        if(isActive == '') { isActive = 'true'; } else if( !isActive ){ isActive = 'false'; }
        if( isActive == 'true' ){ toggle.setAttribute('activated', 'false'); page.toggle[toggleName] = 'false'; }
        else { toggle.setAttribute('activated', 'true'); page.toggle[toggleName] = 'true'; }
        var newVal = toggle.getAttribute('activated');
        var onchange = toggle.getAttribute('onchange'); //onchange
        if( onchange ) {
          if ( onchange.includes('function(') || onchange.includes('function (') ) {
            eval(`(${onchange})(${newVal});`); } else {
            if( onchange.includes('(') ) { onchange = onchange.substring( 0, onchange.indexOf('(') ); }
            try { eval(`${onchange}(${page.toggle[toggleName]})`); } catch(ex){ console.error(`Can't call onchange function :: ${ex}`); }
          }
        } else if( toggle.onchange ) { toggle.onchange( newVal ); }
      }; toggles[i].setAttribute('ripple', true); xApplyRipple( toggles[i] );
    }
  }

};

var xApplyRipple = function(element){
  if(typeof element === 'function' || typeof element === 'string') return;
  try {
    var wrapper = document.createElement('div');
    wrapper.classList.add('--ripple-wrapper');
    element.appendChild(wrapper);
    element.onmousedown = function(e){
      if(e.srcElement != wrapper && e.srcElement != this) return false;
      var r = document.createElement('span');
      var size = this.offsetWidth;
      //var sizeY = this.offsetHeight;
      r.classList.add('--ripple');
      var xp = (e.offsetX) - (size / 2);
      var yp = (e.offsetY) - (size / 2);
      r.setAttribute('style', `left:${xp}px; top:${yp}px; width:${size}px; height:${size}px;`);
      wrapper.appendChild(r);
      setTimeout( () => { r.remove(); }, 320);
    }
  } catch(ex){}
};
